// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/interfaces/platformDeterm.go
//
// Generated by this command:
//
//	mockgen -source=internal/logic/interfaces/platformDeterm.go -destination=internal/mock/platform_determ/mockPlatformDeterm.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	models "surlit/internal/logic/models"

	gomock "go.uber.org/mock/gomock"
)

// MockPlatformDeterminator is a mock of PlatformDeterminator interface.
type MockPlatformDeterminator struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformDeterminatorMockRecorder
}

// MockPlatformDeterminatorMockRecorder is the mock recorder for MockPlatformDeterminator.
type MockPlatformDeterminatorMockRecorder struct {
	mock *MockPlatformDeterminator
}

// NewMockPlatformDeterminator creates a new mock instance.
func NewMockPlatformDeterminator(ctrl *gomock.Controller) *MockPlatformDeterminator {
	mock := &MockPlatformDeterminator{ctrl: ctrl}
	mock.recorder = &MockPlatformDeterminatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformDeterminator) EXPECT() *MockPlatformDeterminatorMockRecorder {
	return m.recorder
}

// DeterminePlatform mocks base method.
func (m *MockPlatformDeterminator) DeterminePlatform(userAgent string) (models.PlatformType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeterminePlatform", userAgent)
	ret0, _ := ret[0].(models.PlatformType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeterminePlatform indicates an expected call of DeterminePlatform.
func (mr *MockPlatformDeterminatorMockRecorder) DeterminePlatform(userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeterminePlatform", reflect.TypeOf((*MockPlatformDeterminator)(nil).DeterminePlatform), userAgent)
}
