// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/interfaces/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/logic/interfaces/repository.go -destination=internal/mock/repository/mockRepository.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	models "surlit/internal/logic/models"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockUserRepository) Authorize(login, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", login, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserRepositoryMockRecorder) Authorize(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserRepository)(nil).Authorize), login, password)
}

// GetUserInfo mocks base method.
func (m *MockUserRepository) GetUserInfo(uuid models.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", uuid)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserRepositoryMockRecorder) GetUserInfo(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserInfo), uuid)
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), user)
}

// UpdateUserInfo mocks base method.
func (m *MockUserRepository) UpdateUserInfo(uuid models.UUID, user *models.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", uuid, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserRepositoryMockRecorder) UpdateUserInfo(uuid, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserInfo), uuid, user)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// GetProjectInfo mocks base method.
func (m *MockProjectRepository) GetProjectInfo(uuid models.UUID) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInfo", uuid)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInfo indicates an expected call of GetProjectInfo.
func (mr *MockProjectRepositoryMockRecorder) GetProjectInfo(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInfo", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectInfo), uuid)
}

// GetUserProjects mocks base method.
func (m *MockProjectRepository) GetUserProjects(userID models.UUID) ([]*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProjects", userID)
	ret0, _ := ret[0].([]*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProjects indicates an expected call of GetUserProjects.
func (mr *MockProjectRepositoryMockRecorder) GetUserProjects(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProjects", reflect.TypeOf((*MockProjectRepository)(nil).GetUserProjects), userID)
}

// GetUserRoleInProject mocks base method.
func (m *MockProjectRepository) GetUserRoleInProject(userID, projectID models.UUID) (models.UserProjectRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleInProject", userID, projectID)
	ret0, _ := ret[0].(models.UserProjectRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleInProject indicates an expected call of GetUserRoleInProject.
func (mr *MockProjectRepositoryMockRecorder) GetUserRoleInProject(userID, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleInProject", reflect.TypeOf((*MockProjectRepository)(nil).GetUserRoleInProject), userID, projectID)
}

// InsertProject mocks base method.
func (m *MockProjectRepository) InsertProject(userID models.UUID, project *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProject", userID, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProject indicates an expected call of InsertProject.
func (mr *MockProjectRepositoryMockRecorder) InsertProject(userID, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProject", reflect.TypeOf((*MockProjectRepository)(nil).InsertProject), userID, project)
}

// UpdateProjectInfo mocks base method.
func (m *MockProjectRepository) UpdateProjectInfo(uuid models.UUID, project *models.UpdateProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectInfo", uuid, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectInfo indicates an expected call of UpdateProjectInfo.
func (mr *MockProjectRepositoryMockRecorder) UpdateProjectInfo(uuid, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectInfo", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProjectInfo), uuid, project)
}

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// FindLinkByToken mocks base method.
func (m *MockLinkRepository) FindLinkByToken(token string) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLinkByToken", token)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLinkByToken indicates an expected call of FindLinkByToken.
func (mr *MockLinkRepositoryMockRecorder) FindLinkByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLinkByToken", reflect.TypeOf((*MockLinkRepository)(nil).FindLinkByToken), token)
}

// GetLinkInfo mocks base method.
func (m *MockLinkRepository) GetLinkInfo(uuid models.UUID) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkInfo", uuid)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkInfo indicates an expected call of GetLinkInfo.
func (mr *MockLinkRepositoryMockRecorder) GetLinkInfo(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkInfo", reflect.TypeOf((*MockLinkRepository)(nil).GetLinkInfo), uuid)
}

// GetProjectLinks mocks base method.
func (m *MockLinkRepository) GetProjectLinks(projectID models.UUID) ([]*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectLinks", projectID)
	ret0, _ := ret[0].([]*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectLinks indicates an expected call of GetProjectLinks.
func (mr *MockLinkRepositoryMockRecorder) GetProjectLinks(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectLinks", reflect.TypeOf((*MockLinkRepository)(nil).GetProjectLinks), projectID)
}

// GetUserLinks mocks base method.
func (m *MockLinkRepository) GetUserLinks(userID models.UUID) ([]*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLinks", userID)
	ret0, _ := ret[0].([]*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLinks indicates an expected call of GetUserLinks.
func (mr *MockLinkRepositoryMockRecorder) GetUserLinks(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLinks", reflect.TypeOf((*MockLinkRepository)(nil).GetUserLinks), userID)
}

// InsertLink mocks base method.
func (m *MockLinkRepository) InsertLink(userID, projectID models.UUID, link *models.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLink", userID, projectID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLink indicates an expected call of InsertLink.
func (mr *MockLinkRepositoryMockRecorder) InsertLink(userID, projectID, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLink", reflect.TypeOf((*MockLinkRepository)(nil).InsertLink), userID, projectID, link)
}

// UpdateLinkInfo mocks base method.
func (m *MockLinkRepository) UpdateLinkInfo(uuid models.UUID, Link *models.UpdateLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkInfo", uuid, Link)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLinkInfo indicates an expected call of UpdateLinkInfo.
func (mr *MockLinkRepositoryMockRecorder) UpdateLinkInfo(uuid, Link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkInfo", reflect.TypeOf((*MockLinkRepository)(nil).UpdateLinkInfo), uuid, Link)
}

// MockRoutingRepository is a mock of RoutingRepository interface.
type MockRoutingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingRepositoryMockRecorder
}

// MockRoutingRepositoryMockRecorder is the mock recorder for MockRoutingRepository.
type MockRoutingRepositoryMockRecorder struct {
	mock *MockRoutingRepository
}

// NewMockRoutingRepository creates a new mock instance.
func NewMockRoutingRepository(ctrl *gomock.Controller) *MockRoutingRepository {
	mock := &MockRoutingRepository{ctrl: ctrl}
	mock.recorder = &MockRoutingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutingRepository) EXPECT() *MockRoutingRepositoryMockRecorder {
	return m.recorder
}

// FindRoutes mocks base method.
func (m *MockRoutingRepository) FindRoutes(linkID models.UUID, filter *models.RouteFilter) ([]*models.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutes", linkID, filter)
	ret0, _ := ret[0].([]*models.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutes indicates an expected call of FindRoutes.
func (mr *MockRoutingRepositoryMockRecorder) FindRoutes(linkID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutes", reflect.TypeOf((*MockRoutingRepository)(nil).FindRoutes), linkID, filter)
}

// GetLinkRoutes mocks base method.
func (m *MockRoutingRepository) GetLinkRoutes(linkID models.UUID) ([]*models.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkRoutes", linkID)
	ret0, _ := ret[0].([]*models.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkRoutes indicates an expected call of GetLinkRoutes.
func (mr *MockRoutingRepositoryMockRecorder) GetLinkRoutes(linkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkRoutes", reflect.TypeOf((*MockRoutingRepository)(nil).GetLinkRoutes), linkID)
}

// GetRouteInfo mocks base method.
func (m *MockRoutingRepository) GetRouteInfo(uuid models.UUID) (*models.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteInfo", uuid)
	ret0, _ := ret[0].(*models.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteInfo indicates an expected call of GetRouteInfo.
func (mr *MockRoutingRepositoryMockRecorder) GetRouteInfo(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteInfo", reflect.TypeOf((*MockRoutingRepository)(nil).GetRouteInfo), uuid)
}

// InsertRoute mocks base method.
func (m *MockRoutingRepository) InsertRoute(route *models.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRoute indicates an expected call of InsertRoute.
func (mr *MockRoutingRepositoryMockRecorder) InsertRoute(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoute", reflect.TypeOf((*MockRoutingRepository)(nil).InsertRoute), route)
}

// UpdateRouteInfo mocks base method.
func (m *MockRoutingRepository) UpdateRouteInfo(uuid models.UUID, route *models.UpdateRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteInfo", uuid, route)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteInfo indicates an expected call of UpdateRouteInfo.
func (mr *MockRoutingRepositoryMockRecorder) UpdateRouteInfo(uuid, route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteInfo", reflect.TypeOf((*MockRoutingRepository)(nil).UpdateRouteInfo), uuid, route)
}

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// GetRouteStats mocks base method.
func (m *MockStatsRepository) GetRouteStats(RouteID models.UUID) ([]*models.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteStats", RouteID)
	ret0, _ := ret[0].([]*models.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteStats indicates an expected call of GetRouteStats.
func (mr *MockStatsRepositoryMockRecorder) GetRouteStats(RouteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteStats", reflect.TypeOf((*MockStatsRepository)(nil).GetRouteStats), RouteID)
}

// GetStatInfo mocks base method.
func (m *MockStatsRepository) GetStatInfo(uuid models.UUID) (*models.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatInfo", uuid)
	ret0, _ := ret[0].(*models.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatInfo indicates an expected call of GetStatInfo.
func (mr *MockStatsRepositoryMockRecorder) GetStatInfo(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatInfo", reflect.TypeOf((*MockStatsRepository)(nil).GetStatInfo), uuid)
}

// InsertStat mocks base method.
func (m *MockStatsRepository) InsertStat(stat *models.Stat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStat", stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStat indicates an expected call of InsertStat.
func (mr *MockStatsRepositoryMockRecorder) InsertStat(stat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStat", reflect.TypeOf((*MockStatsRepository)(nil).InsertStat), stat)
}
