// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/interfaces/ipToGeo.go
//
// Generated by this command:
//
//	mockgen -source=internal/logic/interfaces/ipToGeo.go -destination=internal/mock/ip_to_geo/mockIpToGeo.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	models "surlit/internal/logic/models"

	gomock "go.uber.org/mock/gomock"
)

// MockIPToGeo is a mock of IPToGeo interface.
type MockIPToGeo struct {
	ctrl     *gomock.Controller
	recorder *MockIPToGeoMockRecorder
}

// MockIPToGeoMockRecorder is the mock recorder for MockIPToGeo.
type MockIPToGeoMockRecorder struct {
	mock *MockIPToGeo
}

// NewMockIPToGeo creates a new mock instance.
func NewMockIPToGeo(ctrl *gomock.Controller) *MockIPToGeo {
	mock := &MockIPToGeo{ctrl: ctrl}
	mock.recorder = &MockIPToGeoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPToGeo) EXPECT() *MockIPToGeoMockRecorder {
	return m.recorder
}

// DetermineUserGeo mocks base method.
func (m *MockIPToGeo) DetermineUserGeo(ip string) (models.GeoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineUserGeo", ip)
	ret0, _ := ret[0].(models.GeoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineUserGeo indicates an expected call of DetermineUserGeo.
func (mr *MockIPToGeoMockRecorder) DetermineUserGeo(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineUserGeo", reflect.TypeOf((*MockIPToGeo)(nil).DetermineUserGeo), ip)
}
